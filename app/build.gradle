apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

//apply plugin: 'realm-android'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists() && keystorePropertiesFile.canRead()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 29
    buildToolsVersion '29.0.3'
    defaultConfig {
        applicationId "io.github.gmathi.novellibrary"
        minSdkVersion 21
        targetSdkVersion 29
        multiDexEnabled true
        versionCode 91
        versionName "0.15.4.beta"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        debug {
            pseudoLocalesEnabled true
            getIsDefault().set(true)
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "mode"
    productFlavors {
        mirror {
            // Flavor adds a suffix to the package name, so the
            // build can be installed alongside the main build.
            dimension "mode"
            applicationIdSuffix ".mirror"
        }

        canary {
            // Flavor to enable leekCanary.
            dimension "mode"
        }

        normal {
            // Normal build.
            dimension "mode"
            getIsDefault().set(true)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures {
        dataBinding true
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
    implementation 'androidx.work:work-runtime-ktx:2.4.0'

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'

    implementation 'androidx.multidex:multidex:2.0.1'

    implementation 'org.jsoup:jsoup:1.13.1'
    implementation 'org.greenrobot:eventbus:3.1.1'
    implementation 'com.github.bumptech.glide:glide:4.11.0'

    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation 'com.github.medyo:fancybuttons:1.8.3'
    implementation 'com.github.johnpersano:supertoasts:2.0'

    implementation 'com.squareup.okhttp3:okhttp:4.7.2'
    implementation 'com.hanks.animatecheckbox:library:0.1'
    implementation 'com.yarolegovich:sliding-root-nav:1.1.0'
    implementation 'com.ogaclejapan.smarttablayout:library:2.0.0@aar'
    implementation 'com.futuremind.recyclerfastscroll:fastscroll:0.2.5'
    implementation 'jp.wasabeef:recyclerview-animators:3.0.0'
    implementation 'nl.dionsegijn:konfetti:1.0.2'
    implementation 'co.metalab.asyncawait:asyncawait:1.0.0'

    implementation("com.firebaseui:firebase-ui-auth:4.3.1", {
        exclude group: 'com.google.firebase'
        exclude group: 'com.google.android.gms'
        exclude group: 'com.android.support'
        exclude group: 'com.google.api-client'
        exclude group: 'com.google.apis'
    })

    //TODO: Need to update to new MaterialDialogs
//    implementation 'com.afollestad.material-dialogs:core:3.3.0'
//    implementation 'com.afollestad.material-dialogs:input:3.3.0'
    implementation('com.afollestad.material-dialogs:core:0.9.6.0', {
        exclude group: 'com.android.support'
    })

    implementation('com.afollestad.material-dialogs:commons:0.9.6.0', {
        exclude group: 'com.android.support'
    })

    implementation "com.google.android.gms:play-services-gcm:17.0.0"
    implementation "com.google.android.gms:play-services-drive:17.0.0"
    implementation "com.google.android.gms:play-services-auth:18.1.0"

    implementation "com.google.firebase:firebase-messaging:20.2.4"
    implementation "com.google.firebase:firebase-auth:19.3.2"
    implementation 'com.google.firebase:firebase-analytics:17.5.0'

    implementation "com.google.firebase:firebase-core:17.5.0"
    implementation "com.google.firebase:firebase-config:19.2.0"
    implementation 'com.google.code.gson:gson:2.8.6'

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    implementation 'com.airbnb.android:lottie:3.4.1'
    implementation 'com.github.chimbori:crux:2.2.0'


    implementation 'com.google.firebase:firebase-analytics-ktx:17.5.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.1'


    canaryImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'

    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7"
}

task countTranslations {
    File json = file('src\\main\\assets\\translations.json')

    Set<File> resources = fileTree('src\\main\\res')
            .files.findAll { (it.name == 'strings.xml') }
    File englishResources = resources.find { it.parentFile.name == 'values' }
    resources.remove(englishResources)

    List<String> englishStrings = englishResources.text.readLines()
            .findAll { it.trim().startsWith('<string name="') && !it.contains('translatable="false"') && it.endsWith('</string>') }
            .collect { it.trim().split('">')[1].split('</')[0] }

    json.text = '{\r\n  "en": "' + englishStrings.size() + '"'

    resources.each { resource ->
        List<String> strings = resource.text.readLines()
                .findAll { it.trim().startsWith('<string name="') && !it.contains('translatable="false"') && it.endsWith('</string>') }
                .collect { it.trim().split('">')[1].split('</')[0] }
                .findAll { !englishStrings.contains(it) }
        json.text += ',\r\n  "' + resource.parentFile.name.split('-')[1] + '": "' + strings.size() + '"'
    }

    json.text += '\r\n}'
    //print(json.text)
}